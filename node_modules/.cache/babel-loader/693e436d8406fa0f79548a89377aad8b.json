{"ast":null,"code":"function generateRandomValues(max, min) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport default {\n  data() {\n    return {\n      playerHealth: 100,\n      monsterHealth: 100,\n      countRounds: 0,\n      winner: null,\n      logMessages: []\n    };\n  },\n\n  methods: {\n    attackMonster() {\n      this.countRounds++;\n      const attackValue = generateRandomValues(12, 5);\n      this.monsterHealth -= attackValue;\n      this.attackPlayer();\n      this.logMessage(\"player\", \"attack\", attackValue);\n    },\n\n    attackPlayer() {\n      const attackValue = generateRandomValues(15, 8);\n      this.playerHealth -= attackValue;\n      this.logMessage(\"monster\", \"attack\", attackValue);\n    },\n\n    specialAttack() {\n      this.countRounds++;\n      const attackValue = generateRandomValues(25, 10);\n      this.monsterHealth -= attackValue;\n      this.logMessage(\"player\", \"speacial-attack\", attackValue);\n    },\n\n    healPlayer() {\n      const healValue = generateRandomValues(20, 8);\n\n      if (this.playerHealth + healValue > 100) {\n        this.playerHealth = 100;\n      } else {\n        this.playerHealth += healValue;\n      }\n\n      this.attackPlayer();\n      this.logMessage(\"player\", \"heal\", healValue);\n    },\n\n    startNewGame() {\n      this.monsterHealth = 100;\n      this.playerHealth = 100;\n      this.countRounds = 0;\n      this.logMessages = [], this.winner = null;\n    },\n\n    surrender() {\n      this.winner = \"monster\";\n    },\n\n    logMessage(who, what, value) {\n      this.logMessages.unshift({\n        actionBy: who,\n        actionType: what,\n        actionValue: value\n      });\n    }\n\n  },\n  computed: {\n    monsterHealthStatus() {\n      if (this.monsterHealth <= 0) {\n        return {\n          width: \"0%\"\n        };\n      }\n\n      return {\n        width: this.monsterHealth + \"%\"\n      };\n    },\n\n    playerHealthStatus() {\n      if (this.playerHealth <= 0) {\n        return {\n          width: \"0%\"\n        };\n      }\n\n      return {\n        width: this.playerHealth + \"%\"\n      };\n    },\n\n    mayUseSpecialAttack() {\n      return this.countRounds % 3 !== 0;\n    }\n\n  },\n  watch: {\n    monsterHealth(value) {\n      if (value <= 0 && this.playerHealth <= 0) {\n        this.winner = \"draw\";\n      } else if (value <= 0) {\n        this.winner = \"player\";\n      }\n    },\n\n    playerHealth() {\n      if (value <= 0 && this.monsterHealth <= 0) {\n        this.winner = \"draw\";\n      } else if (value <= 0) {\n        this.winner = \"monster\";\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["generateRandomValues","max","min","Math","floor","random","data","playerHealth","monsterHealth","countRounds","winner","logMessages","methods","attackMonster","attackValue","attackPlayer","logMessage","specialAttack","healPlayer","healValue","startNewGame","surrender","who","what","value","unshift","actionBy","actionType","actionValue","computed","monsterHealthStatus","width","playerHealthStatus","mayUseSpecialAttack","watch"],"sourceRoot":"","sources":["/home/felidrick/Projects/VueProjects/learn1/src/ProjectC.vue"],"sourcesContent":["<template>\n  <header>\n    <h1>Testing vue js Project 1</h1>\n  </header>\n  <div id=\"game\">\n    <section id=\"monster\" class=\"container\">\n      <h2>Monster Health</h2>\n      <div class=\"healthbar\">\n        <div class=\"healthbar__value\" :style=\"monsterHealthStatus\"></div>\n      </div>\n    </section>\n    <section id=\"player\" class=\"container\">\n      <h2>Your Health</h2>\n      <div class=\"healthbar\">\n        <div class=\"healthbar__value\" :style=\"playerHealthStatus\"></div>\n      </div>\n    </section>\n    <section class=\"container\" v-if=\"winner\">\n      <h3 v-if=\"winner === 'monster'\">You lost!</h3>\n      <h3 v-else-if=\"winner === 'player'\">You won!</h3>\n      <h3 v-else>Draw</h3>\n      <button @click=\"startNewGame\">Start new game</button>\n    </section>\n    <section id=\"controls\" v-if=\"!winner\">\n      <button @click=\"attackMonster\">ATTACK</button>\n      <button :disabled=\"mayUseSpecialAttack\" @click=\"specialAttack\">\n        SPECIAL ATTACK\n      </button>\n      <button @click=\"healPlayer\">HEAL</button>\n      <button @click=\"surrender\">SURRENDER</button>\n    </section>\n    <section id=\"log\" class=\"container\">\n      <h2>Battle Log</h2>\n      <ul v-for=\"(logMessage, key) in logMessages\" :key=\"key\">\n        <span\n          :class=\"{\n            'log--player': logMessage.actionBy === 'player',\n            'log--monster': logMessage.actionBy === 'monster',\n          }\"\n        >\n          {{ logMessage.actionBy }}\n        </span>\n\n        <span v-if=\"logMessage.actionType === 'heal'\">\n          heals for\n          <span class=\"log--heal\">\n            {{ logMessage.actionValue }}\n          </span>\n        </span>\n\n        <span v-else>\n          attacks with\n          <span class=\"log--damage\">\n            {{ logMessage.actionValue }}\n          </span>\n        </span>\n      </ul>\n    </section>\n  </div>\n</template>\n\n<script>\nfunction generateRandomValues(max, min) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport default {\n  data() {\n    return {\n      playerHealth: 100,\n      monsterHealth: 100,\n      countRounds: 0,\n      winner: null,\n      logMessages: [],\n    };\n  },\n  methods: {\n    attackMonster() {\n      this.countRounds++;\n      const attackValue = generateRandomValues(12, 5);\n      this.monsterHealth -= attackValue;\n      this.attackPlayer();\n      this.logMessage(\"player\", \"attack\", attackValue);\n    },\n    attackPlayer() {\n      const attackValue = generateRandomValues(15, 8);\n      this.playerHealth -= attackValue;\n      this.logMessage(\"monster\", \"attack\", attackValue);\n    },\n    specialAttack() {\n      this.countRounds++;\n      const attackValue = generateRandomValues(25, 10);\n      this.monsterHealth -= attackValue;\n      this.logMessage(\"player\", \"speacial-attack\", attackValue);\n    },\n    healPlayer() {\n      const healValue = generateRandomValues(20, 8);\n      if (this.playerHealth + healValue > 100) {\n        this.playerHealth = 100;\n      } else {\n        this.playerHealth += healValue;\n      }\n\n      this.attackPlayer();\n      this.logMessage(\"player\", \"heal\", healValue);\n    },\n    startNewGame() {\n      this.monsterHealth = 100;\n      this.playerHealth = 100;\n      this.countRounds = 0;\n      (this.logMessages = []), (this.winner = null);\n    },\n    surrender() {\n      this.winner = \"monster\";\n    },\n    logMessage(who, what, value) {\n      this.logMessages.unshift({\n        actionBy: who,\n        actionType: what,\n        actionValue: value,\n      });\n    },\n  },\n  computed: {\n    monsterHealthStatus() {\n      if (this.monsterHealth <= 0) {\n        return { width: \"0%\" };\n      }\n      return { width: this.monsterHealth + \"%\" };\n    },\n    playerHealthStatus() {\n      if (this.playerHealth <= 0) {\n        return { width: \"0%\" };\n      }\n      return { width: this.playerHealth + \"%\" };\n    },\n    mayUseSpecialAttack() {\n      return this.countRounds % 3 !== 0;\n    },\n  },\n  watch: {\n    monsterHealth(value) {\n      if (value <= 0 && this.playerHealth <= 0) {\n        this.winner = \"draw\";\n      } else if (value <= 0) {\n        this.winner = \"player\";\n      }\n    },\n    playerHealth() {\n      if (value <= 0 && this.monsterHealth <= 0) {\n        this.winner = \"draw\";\n      } else if (value <= 0) {\n        this.winner = \"monster\";\n      }\n    },\n  },\n};\n</script>\n\n<style>\n* {\n  box-sizing: border-box;\n}\n\nheader {\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);\n  padding: 0.5rem;\n  background-color: #880017;\n  color: white;\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\nsection {\n  width: 90%;\n  max-width: 40rem;\n  margin: auto;\n}\n\n.healthbar {\n  width: 100%;\n  height: 40px;\n  border: 1px solid #575757;\n  margin: 1rem 0;\n  background: #fde5e5;\n}\n\n.healthbar__value {\n  background-color: #00a876;\n  width: 100%;\n  height: 100%;\n}\n\n.container {\n  text-align: center;\n  padding: 0.5rem;\n  margin: 1rem auto;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);\n  border-radius: 12px;\n}\n\n#monster h2,\n#player h2 {\n  margin: 0.25rem;\n}\n\n#controls {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n}\n\nbutton {\n  font: inherit;\n  border: 1px solid #88005b;\n  background-color: #88005b;\n  color: white;\n  padding: 1rem 2rem;\n  border-radius: 12px;\n  margin: 1rem;\n  width: 12rem;\n  cursor: pointer;\n  box-shadow: 1px 1px 4px rgba(0, 0, 0, 0.26);\n}\n\nbutton:focus {\n  outline: none;\n}\n\nbutton:hover,\nbutton:active {\n  background-color: #af0a78;\n  border-color: #af0a78;\n  box-shadow: 1px 1px 8px rgba(0, 0, 0, 0.26);\n}\n\nbutton:disabled {\n  background-color: #ccc;\n  border-color: #ccc;\n  box-shadow: none;\n  color: #3f3f3f;\n  cursor: not-allowed;\n}\n\n#log ul {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n#log li {\n  margin: 0.5rem 0;\n}\n\n.log--player {\n  color: #7700ff;\n}\n\n.log--monster {\n  color: #da8d00;\n}\n\n.log--damage {\n  color: red;\n}\n\n.log--heal {\n  color: green;\n}\n</style>"]},"metadata":{},"sourceType":"module"}