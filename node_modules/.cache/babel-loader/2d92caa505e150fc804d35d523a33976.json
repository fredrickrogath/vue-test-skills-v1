{"ast":null,"code":"function generateRandomValues(max, min) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport default {\n  data() {\n    return {\n      playerHealth: 100,\n      monsterHealth: 100,\n      countRounds: 0,\n      winner: null,\n      logMessages\n    };\n  },\n\n  methods: {\n    attackMonster() {\n      this.countRounds++;\n      const attackValue = generateRandomValues(12, 5);\n      this.monsterHealth -= attackValue;\n      this.attackPlayer();\n    },\n\n    attackPlayer() {\n      const attackValue = generateRandomValues(15, 8);\n      this.playerHealth -= attackValue;\n    },\n\n    specialAttack() {\n      this.countRounds++;\n      const attackValue = generateRandomValues(25, 10);\n      this.monsterHealth -= attackValue;\n    },\n\n    healPlayer() {\n      const healValue = generateRandomValues(20, 8);\n\n      if (this.playerHealth + healValue > 100) {\n        this.playerHealth = 100;\n      } else {\n        this.playerHealth += healValue;\n      }\n\n      this.attackPlayer();\n    },\n\n    startNewGame() {\n      this.monsterHealth = 100;\n      this.playerHealth = 100;\n      this.countRounds = 0;\n      this.winner = null;\n    },\n\n    surrender() {\n      this.winner = 'monster';\n    }\n\n  },\n  computed: {\n    monsterHealthStatus() {\n      if (this.monsterHealth <= 0) {\n        return {\n          width: '0%'\n        };\n      }\n\n      return {\n        width: this.monsterHealth + '%'\n      };\n    },\n\n    playerHealthStatus() {\n      if (this.playerHealth <= 0) {\n        return {\n          width: '0%'\n        };\n      }\n\n      return {\n        width: this.playerHealth + '%'\n      };\n    },\n\n    mayUseSpecialAttack() {\n      return this.countRounds % 3 !== 0;\n    }\n\n  },\n  watch: {\n    monsterHealth(value) {\n      if (value <= 0 && this.playerHealth <= 0) {\n        this.winner = 'draw';\n      } else if (value <= 0) {\n        this.winner = 'player';\n      }\n    },\n\n    playerHealth(value) {\n      if (value <= 0 && this.monsterHealth <= 0) {\n        this.winner = 'draw';\n      } else if (value <= 0) {\n        this.winner = 'monster';\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["generateRandomValues","max","min","Math","floor","random","data","playerHealth","monsterHealth","countRounds","winner","logMessages","methods","attackMonster","attackValue","attackPlayer","specialAttack","healPlayer","healValue","startNewGame","surrender","computed","monsterHealthStatus","width","playerHealthStatus","mayUseSpecialAttack","watch","value"],"sourceRoot":"","sources":["/home/felidrick/Projects/VueProjects/learn1/src/ProjectC.vue"],"sourcesContent":["<template>\n    <header>\n      <h1>Testing vue js Project 1</h1>\n    </header>\n    <div id=\"game\">\n      <section id=\"monster\" class=\"container\">\n        <h2>Monster Health</h2>\n        <div class=\"healthbar\">\n          <div class=\"healthbar__value\" :style=\"monsterHealthStatus\"></div>\n        </div>\n      </section>\n      <section id=\"player\" class=\"container\">\n        <h2>Your Health</h2>\n        <div class=\"healthbar\">\n          <div class=\"healthbar__value\" :style=\"playerHealthStatus\"></div>\n        </div>\n      </section>\n      <section class=\"container\" v-if=\"winner\">\n        <h3 v-if=\"winner === 'monster'\">You lost!</h3>\n        <h3 v-else-if=\"winner === 'player'\">You won!</h3>\n        <h3 v-else>Draw</h3>\n        <button @click=\"startNewGame\">Start new game</button>\n      </section>\n      <section id=\"controls\" v-if=\"!winner\">\n        <button @click=\"attackMonster\">ATTACK</button>\n        <button :disabled=\"mayUseSpecialAttack\" @click=\"specialAttack\">SPECIAL ATTACK</button>\n        <button @click=\"healPlayer\">HEAL</button>\n        <button @click=\"surrender\">SURRENDER</button>\n      </section>\n      <section id=\"log\" class=\"container\">\n        <h2>Battle Log</h2>\n        <ul></ul>\n      </section>\n    </div>\n</template>\n\n<script>\n\nfunction generateRandomValues(max, min){\n    return Math.floor(Math.random()*(max - min)) + min;\n}\n\nexport default {\n    data() {\n        return {\n            playerHealth: 100,\n            monsterHealth: 100,\n            countRounds:0,\n            winner:null,\n            logMessages\n        }\n    },\n    methods:{\n        attackMonster(){\n            this.countRounds++;\n            const attackValue = generateRandomValues(12,5);\n            this.monsterHealth -= attackValue;\n            this.attackPlayer();\n        },\n        attackPlayer(){\n            const attackValue = generateRandomValues(15,8);\n            this.playerHealth -= attackValue;\n        },\n        specialAttack(){\n            this.countRounds++;\n            const attackValue = generateRandomValues(25, 10);\n            this.monsterHealth -= attackValue;\n        },\n        healPlayer(){\n            const healValue = generateRandomValues(20, 8);\n            if(this.playerHealth + healValue > 100){\n                this.playerHealth = 100;\n            }else{\n                this.playerHealth += healValue;\n            }\n\n            this.attackPlayer();\n        },\n        startNewGame(){\n          this.monsterHealth = 100;\n          this.playerHealth =100;\n          this.countRounds = 0;\n          this.winner = null;\n        },\n        surrender(){\n          this.winner = 'monster';\n        }\n    },\n    computed:{\n        monsterHealthStatus(){\n          if(this.monsterHealth <= 0){\n            return {width: '0%'};\n          }\n            return {width: this.monsterHealth + '%'};\n        },\n        playerHealthStatus(){\n          if(this.playerHealth <= 0){\n            return {width: '0%'};\n          }\n            return {width: this.playerHealth + '%'};\n        },\n        mayUseSpecialAttack(){\n            return this.countRounds % 3 !== 0 ;\n        }\n    },\n    watch:{\n        monsterHealth(value){\n          if(value <= 0 && this.playerHealth <= 0){\n            this.winner = 'draw';\n          }else if(value <= 0){\n            this.winner = 'player';\n          }\n        },\n        playerHealth(value){\n          if(value <= 0 && this.monsterHealth <= 0){\n            this.winner = 'draw';\n          }else if(value <= 0){\n            this.winner = 'monster';\n          }\n        }\n    }\n}\n</script>\n\n<style>\n\n* {\n  box-sizing: border-box;\n}\n\nheader {\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);\n  padding: 0.5rem;\n  background-color: #880017;\n  color: white;\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\nsection {\n  width: 90%;\n  max-width: 40rem;\n  margin: auto;\n}\n\n.healthbar {\n  width: 100%;\n  height: 40px;\n  border: 1px solid #575757;\n  margin: 1rem 0;\n  background: #fde5e5;\n}\n\n.healthbar__value {\n  background-color: #00a876;\n  width: 100%;\n  height: 100%;\n}\n\n.container {\n  text-align: center;\n  padding: 0.5rem;\n  margin: 1rem auto;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);\n  border-radius: 12px;\n}\n\n#monster h2,\n#player h2 {\n  margin: 0.25rem;\n}\n\n#controls {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n}\n\nbutton {\n  font: inherit;\n  border: 1px solid #88005b;\n  background-color: #88005b;\n  color: white;\n  padding: 1rem 2rem;\n  border-radius: 12px;\n  margin: 1rem;\n  width: 12rem;\n  cursor: pointer;\n  box-shadow: 1px 1px 4px rgba(0, 0, 0, 0.26);\n}\n\nbutton:focus {\n  outline: none;\n}\n\nbutton:hover,\nbutton:active {\n  background-color: #af0a78;\n  border-color: #af0a78;\n  box-shadow: 1px 1px 8px rgba(0, 0, 0, 0.26);\n}\n\nbutton:disabled {\n  background-color: #ccc;\n  border-color: #ccc;\n  box-shadow: none;\n  color: #3f3f3f;\n  cursor: not-allowed;\n}\n\n#log ul {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n#log li {\n  margin: 0.5rem 0;\n}\n\n.log--player {\n  color: #7700ff;\n}\n\n.log--monster {\n  color: #da8d00;\n}\n\n.log--damage {\n  color: red;\n}\n\n.log--heal {\n  color: green;\n}\n</style>"]},"metadata":{},"sourceType":"module"}